input {
  tcp {
    port => 6379
    type => "syslog-relay"
  }
  file {
    path => "/data/log/beacon/staging/*.log"
    type => "beacon"
    sincedb_path => "/root/.sincedb"
    start_position => "beginning"
  }
}

filter {
  if [type] == "syslog-relay" {
       grok { match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\]:|:|)(?: \[TaskName=%{WORD:task_name}\])?(?: \[Action=%{WORD:ta
sk_action}\])?(?: \[SkuKey=%{NOTSPACE:sku_key}\])? %{GREEDYDATA:syslog_message}" ] }
        #grok { match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}" ] }
        #grok { match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} %{GREEDYDATA:syslog_message}" ] }
        #grok { match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" ] }

        if ("_grokparsefailure" in [tags]) {
                mutate {
                        remove_tag => [ "_grokparsefailure" ]
                        replace => [ "syslog_program", "NOT_SPECIFIED" ]
                }
                grok { match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" ] }
        }
        else if ( [syslog_program] in [ "at", "Type:[FormatException]," ] ) {
                mutate {
                        replace => [ "syslog_message", "%{syslog_program} %{syslog_message}" ]
                        replace => [ "syslog_program", "NOT_SPECIFIED" ]
                }
        }


          syslog_pri { }
        #date {
        #       match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        #}

        if !("_grokparsefailure" in [tags]) {
                mutate {
                        replace => [ "host", "%{syslog_hostname}" ]
                        replace => [ "@message", "%{syslog_message}" ]
                }
        }

        if [syslog_facility_code] == 20 {
                mutate {
                        replace => [ "syslog_facility", "dev" ]
                }
        }
        else if [syslog_facility_code] == 21 {
                mutate {
                        replace => [ "syslog_facility", "qa" ]
                }
        }
        else if [syslog_facility_code] == 22 {
                mutate {
                        replace => [ "syslog_facility", "uat" ]
                }
        }
        else if [syslog_facility_code] == 23 {
                mutate {
                        replace => [ "syslog_facility", "live" ]
                }
        }
        else if [syslog_facility_code] == 19 {
                mutate {
                        replace => [ "syslog_facility", "local" ]
                }
        }

          mutate {
                remove_field => [ "syslog_hostname", "syslog_message" ]
        }
        }

  if [type] == "beacon" {
    grok {
      match => ["message", "%{IP:private_host} \[%{IP:host}\] - - \[%{HTTPDATE:syslog_timestamp/}%{GREEDYDATA:message}"]
    }
  }
}

output {
    elasticsearch {
        protocol => "http"
        host => "@@ELASTICSEARCH"
    }
}