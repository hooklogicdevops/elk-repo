{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "ELK Stack - Elasticsearch, Logstash, Kibana",

    "Parameters": {

        "KeyName": {
            "Default": "bootstrap",
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "String"
        },
        "Stage": {
            "Description": "Stage",
            "Type": "String",
            "Default": "PROD",
            "AllowedValues": [ "PROD", "CODE" ],
            "ConstraintDescription": "must be a valid stage eg. PROD, CODE"
        },
        "LogstashCapacity": {
            "Description": "Logstash Autoscale Size",
            "Type": "Number",
            "Default": "1",
            "MinValue": 1,
            "MaxValue": 12
        },
        "LogstashInstanceType": {
            "Description": "Logstash EC2 instance type",
            "Type": "String",
            "Default": "t1.micro",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type"
        },
         "ElasticsearchCapacity": {
            "Description": "Elasticsearch Autoscale Size",
            "Type": "Number",
            "Default": 1,
            "MinValue": 1,
            "MaxValue": 12
        },
        "ElasticsearchInstanceType": {
            "Description": "Elasticsearch EC2 instance type",
            "Type": "String",
            "Default": "m3.large",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type"
        }
    },

    "Resources": {

        "LogstashLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "TCP",
                        "LoadBalancerPort": "6379",
                        "InstancePort": "6379"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:6379",
                    "Timeout": "5",
                    "Interval": "10",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                }
            }

        },

        "LogstashAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "LaunchConfigurationName": { "Ref": "LogstashLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "12",
                "DesiredCapacity": { "Ref": "LogstashCapacity" },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [ { "Ref": "LogstashLoadBalancer" } ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "AWS::StackName" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": "logstash",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join":[ "-", [ { "Ref": "AWS::StackName" }, "logstash" ] ] },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },

        "LogstashLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": "ami-cb4986bc",
                "SecurityGroups": [ { "Ref": "LogstashSecurityGroup" } ],
                "InstanceType": { "Ref": "LogstashInstanceType" },
                "KeyName": { "Ref": "KeyName" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "\n", [
                            "#!/bin/bash -v",

                            "wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add -",
                            "echo \"deb http://packages.elasticsearch.org/logstash/1.4/debian stable main\" > /etc/apt/sources.list.d/logstash.list",

                            "apt-get -y update",
                            "apt-get -y install language-pack-en openjdk-7-jre-headless logstash",

                            "wget -O /etc/logstash/conf.d/logstash-indexer.conf https://raw.githubusercontent.com/satterly/elk-stack/master/config/logstash-indexer.conf",

                            { "Fn::Join": [ "", [ "sed -i",
                                " -e 's,@@ELASTICSEARCH,", { "Fn::GetAtt": [ "ElasticsearchLoadBalancer", "DNSName" ]}, ",g'",
                                " /etc/logstash/conf.d/logstash-indexer.conf" ] ] },

                            "start logstash"
                        ] ]
                    }
                }
            }
        },

        "LogstashSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SSH, Elasticsearch, and HTTP",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6379",
                        "ToPort": "6379",
                        "SourceSecurityGroupName": "amazon-elb-sg",
                        "SourceSecurityGroupOwnerId": "amazon-elb"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "77.91.248.0/21"
                    }
                ]
            }
        },

        "Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName":"LoggerServerPolicy",
                        "PolicyDocument": {
                            "Version" : "2012-10-17",
                            "Statement": [
                                {
                                    "Action": "ec2:DescribeInstances",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "Role" } ]
            }
        },

        "ElasticsearchLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "CrossZone": true,
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80"
                    },
                    {
                        "Protocol": "HTTP",
                        "LoadBalancerPort": "9200",
                        "InstancePort": "9200"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9200/",
                    "Timeout": "10",
                    "Interval": "20",
                    "UnhealthyThreshold": "10",
                    "HealthyThreshold": "2"
                }
            }
        },

        "ElasticsearchAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "LaunchConfigurationName": { "Ref": "ElasticsearchLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "12",
                "DesiredCapacity": { "Ref": "ElasticsearchCapacity" },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [ { "Ref": "ElasticsearchLoadBalancer" } ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "AWS::StackName" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": "elasticsearch",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join":[ "-", [ { "Ref": "AWS::StackName" }, "elasticsearch" ] ] },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },

        "ElasticsearchLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": "ami-cb4986bc",
                "SecurityGroups": [ { "Ref": "ElasticsearchSecurityGroup" } ],
                "InstanceType": { "Ref": "ElasticsearchInstanceType" },
                "KeyName": { "Ref": "KeyName" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },

                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "\n", [
                            "#!/bin/bash -v",

                            "wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | apt-key add -",
                            "echo \"deb http://packages.elasticsearch.org/elasticsearch/1.1/debian stable main\" > /etc/apt/sources.list.d/elasticsearch.list",

                            "apt-get -y update",
                            "apt-get -y install language-pack-en openjdk-7-jre-headless elasticsearch nginx",

                            "/usr/share/elasticsearch/bin/plugin --install elasticsearch/elasticsearch-cloud-aws/2.1.1",
                            "/usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head",
                            "/usr/share/elasticsearch/bin/plugin --install lukas-vlcek/bigdesk",
                            "/usr/share/elasticsearch/bin/plugin --install karmi/elasticsearch-paramedic",
                            "/usr/share/elasticsearch/bin/plugin --install royrusso/elasticsearch-HQ",

                            "wget -O /etc/elasticsearch/elasticsearch.yml https://raw.githubusercontent.com/satterly/elk-stack/master/config/elasticsearch.yml",
                            { "Fn::Join": [ "", [ "sed -i",
                                " -e 's,@@REGION,", { "Ref": "AWS::Region" }, ",g'",
                                " /etc/elasticsearch/elasticsearch.yml" ] ] },

                            "wget -O /etc/init/elasticsearch.conf https://raw.githubusercontent.com/satterly/elk-stack/master/config/upstart-elasticsearch.conf",

                            "umount /mnt",
                            "mkdir -m 000 /data",
                            "mount /dev/xvdb /data",

                            "sysctl vm.overcommit_memory=1",

                            "cd /usr/share/nginx/html",
                            "wget http://download.elasticsearch.org/kibana/kibana/kibana-latest.tar.gz",
                            "tar zxvf kibana-latest.tar.gz",
                            "mv kibana-latest kibana",

                            "rm /etc/nginx/sites-enabled/default",
                            "mv nginx-sites.conf /etc/nginx/sites-enabled",

                            "start elasticsearch",
                            "start nginx"
                        ] ]
                    }
                }
            }
        },

        "ElasticsearchSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SSH, Elasticsearch, and HTTP",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupName": "amazon-elb-sg",
                        "SourceSecurityGroupOwnerId": "amazon-elb"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9200",
                        "ToPort": "9200",
                        "SourceSecurityGroupName": "amazon-elb-sg",
                        "SourceSecurityGroupOwnerId": "amazon-elb"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "77.91.248.0/21"
                    }
                ]
            }
        },
        "ElasticsearchSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupName": { "Ref": "ElasticsearchSecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": "9300",
                "ToPort": "9300",
                "SourceSecurityGroupName": { "Ref": "ElasticsearchSecurityGroup"}
            }
        }
    },

    "Outputs": {
        "LogstashEndpoint": {
            "Value": { "Fn::Join": ["", [ { "Fn::GetAtt": [ "LogstashLoadBalancer", "DNSName" ]}, ":6379"]] },
            "Description": "Logging endpoint for Logstash TCP input"
        },
        "KibanaURL": {
            "Value": { "Fn::Join": ["", ["http://", { "Fn::GetAtt": [ "ElasticsearchLoadBalancer", "DNSName" ]}, "/kibana"]] },
            "Description": "URL for the Kibana Dashboard"
        }
    }
}
